Sidney Jackson & Florian Pontani
sjacks85@jhu.edu flo@jhu.edu
Last Modified: October 26, 2015

READ_ME FILE:
*****************************
SUMMARY:
**We should probably consider making a menu for the driver at some point.**

***Critter Class: 

Basically a class containing the characters of the critter (scary, cute,
strange),  along with the critter data (which we will either use maps or
ENUMS to interpret the characteristics… which will be printed to the user
of the program and be accompanied with the feature/parts of the creature).

Also! This class needs an overloaded decode function that is capable of
calling he decode function from the feature classes.

***Feature Classes:
 
[Totally dependent on how many parts we want are critter
to have…we should probably start with 3 to get the hang of it before
we work on any more (at least 3 more)]

Feature Details:

I want to say that the feature details shouldn't exceed more than 5…but that’s 
just me. 

Possible Features:

Feature 1: Texture
Feature 2: Eyes
Feature 3: Limbs
Feature 4: Hands
Feature 5: Shape
Feature 6: Tail
Feature 7: Personality

There should also be an encode function and a decode function for 
encoding/decoding the binary “DNA”.

***The DNA, is basically encoded using a very long int.
Now, to get this very long integer, we need to appropriately decode it 
from the binary string. Once we get the long int, we’ll use either a bit
map or ENUMS to define the characteristics.***

Each feature should come with a character number (defining what scary, cute,
and strange is). There could be a helper function (probably in the critter
class), that takes the average of each characters number, and fits it to 
what ever our max scale is... Apparently we don't have to worry about this
for the assignment though.

Each feature class needs an encode function and a decode function. The encode
function will, in a sense, create an "array" of bits that 
will later be decoded. This "array" of bits define each have a particular
bit length associated with them and define the characteristics. 

We will then need a decode function that will interpret this into numbers
that define the characters.
(This function will be called by the critter class).

We'll need to use bit shift operators to get to the characeristics we 
want. (Example: If the "limb" of the critter is defined with 4 bits and
can be found 15 bits into our DNA "array" of bits, we'll need to bit shift
by 15 and start reading after bit 15 for 4 bits. Then we decode those 4 bits
(say it's 0101) into "5". Then we give the critter whatever "limb" attribute
is associated with "5". Let's say, 5 = Short. The critter has short legs.
This is basically how all features will be defined and decoded.)

There is a minimum of 3 features for this assignment.
Each feature needs two distinct descriptors
Each descriptor needs four distinct options.

Example of a feature: Eyes:
2 Descriptors: Number, Type
Number Descriptors: 1, 2, 4, 8
Type Descriptors: Slit Pupil, Compound, Large Pupil, Beady

Decoding Eye:
[1][4] = One Beady Eye

Binary Encoding: This is a lot more ideal for working with pseudo genetics 
which involve mutations (flipping bits) and also carrying out pseudo-cross
over that is so integral to genetics regarding critter reproduction anyway.

Encoding Class:
Has the Cross-Over Function.
Has the Mutation Function.

Decoding Class:
Decoding function:
Decodes binary into appropriate numbers.
Mostly just interprets binary using functions that can tell where they
need to look to get what it needs to get. This will particularly important to
creating human readable strings. No matter what new feature we add,
we can finesse it into a cohesive, human, readable string as long as we place
the descriptor derived from the binary code into a grammatically sensible 
paragraph describing each critter.

This suggests that each feature will also need to know where to look when
trying to find its descriptors along the DNA string (the very long
integer).

Issues/Frustration:
Not there yet...

Overall Outcome:
Not there yet...

ASSIGNMENT FEEDBACK:
Not there yet...

NOTES:

*******************************
Unit Testing Notes:

//Include static void unitTest(); in the Critter.cpp file
//Include the unitTest function within the Critter Class:
//This way, the unit tests has access to the private variables
//of the class.

****************************
void Critter :: unitTest() {
std::cout << "Starting unit tests for Critter...\n");
//TODO
}
****************************
EXAMPLE:
#include <iostream>
#incldue <critter.hpp>

int main(){
Critter::unitTest();
Eyes::unitTest();
Texture::unitTest()

return 0;
}
*****************************
